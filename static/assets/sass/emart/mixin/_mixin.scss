// Center Mixin
@mixin centerer {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

// Position Mixin
@mixin position($position, $top: null, $right: null, $bottom: null, $left: null) {
  position: $position;
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
}


// Prefix Mixin
@mixin prefix($property, $value, $prefixes: ()) {
  @each $prefix in $prefixes {
    #{'-' + $prefix + '-' + $property}: $value;
  }

  // Output standard non-prefixed declaration
  #{$property}: $value;
}

// Mixin to manage BreakPoint Responsive
// $breakpoints: ('xsmall': 414px,
//   'small': 767px,
//   'medium': 992px,
//   'large': 1200px) !default;

// @mixin respond-to($breakpoint) {

//   // If the key exists in the map
//   @if map-has-key($breakpoints, $breakpoint) {

//     // Prints a media query based on the value
//     @media (min-width: map-get($breakpoints, $breakpoint)) {
//       @content;
//     }
//   }

//   // If the key doesn't exist in the map
//   @else {
//     @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
//     +"Available breakpoints are: #{map-keys($breakpoints)}.";
//   }
// }


/// Returns the opposite direction of each direction in a list
@function opposite-direction($directions) {
  $opposite-directions: ();
  $direction-map: ('top': 'bottom',
      'right': 'left',
      'bottom': 'top',
      'left': 'right',
      'center': 'center',
      'ltr': 'rtl',
      'rtl': 'ltr'
    );

  @each $direction in $directions {
    $direction: to-lower-case($direction);

    @if map-has-key($direction-map, $direction) {
      $opposite-directions: append($opposite-directions, unquote(map-get($direction-map, $direction)));
    }

    @else {
      @warn "No opposite direction can be found for `#{$direction}`. Direction omitted.";
    }
  }

  @return $opposite-directions;
}

// Mixin EM
$browser-context: 16;

@function em($pixels, $context: $browser-context) {
  @if (unitless($pixels)) {
    $pixels: $pixels * 1px;
  }

  @if (unitless($context)) {
    $context: $context * 1px;
  }

  @return $pixels / $context * 1em;
}


// Mixin Links Tag
@mixin linx ($link, $visit, $hover, $active) {
  a {
    color: $link;

    &:visited {
      color: $visit;
    }

    &:hover {
      color: $hover;
    }

    &:active {
      color: $active;
    }
  }
}

//   Border Radius Mixin
@mixin border-radius($border-radius) {
  -webkit-border-radius: $border-radius;
  -moz-border-radius: $border-radius;
  -ms-border-radius: $border-radius;
  -o-border-radius: $border-radius;
  border-radius: $border-radius;
}

@mixin border-top-radius($radius: $border-radius) {
  @if $enable-rounded {
    border-top-left-radius: valid-radius($radius);
    border-top-right-radius: valid-radius($radius);
  }
}

@mixin border-end-radius($radius: $border-radius) {
  @if $enable-rounded {
    border-top-right-radius: valid-radius($radius);
    border-bottom-right-radius: valid-radius($radius);
  }
}

@mixin border-bottom-radius($radius: $border-radius) {
  @if $enable-rounded {
    border-bottom-right-radius: valid-radius($radius);
    border-bottom-left-radius: valid-radius($radius);
  }
}

@mixin border-start-radius($radius: $border-radius) {
  @if $enable-rounded {
    border-top-left-radius: valid-radius($radius);
    border-bottom-left-radius: valid-radius($radius);
  }
}

@mixin border-top-start-radius($radius: $border-radius) {
  @if $enable-rounded {
    border-top-left-radius: valid-radius($radius);
  }
}

@mixin border-top-end-radius($radius: $border-radius) {
  @if $enable-rounded {
    border-top-right-radius: valid-radius($radius);
  }
}

@mixin border-bottom-end-radius($radius: $border-radius) {
  @if $enable-rounded {
    border-bottom-right-radius: valid-radius($radius);
  }
}

@mixin border-bottom-start-radius($radius: $border-radius) {
  @if $enable-rounded {
    border-bottom-left-radius: valid-radius($radius);
  }
}

// Transition Mixin
@mixin transition($transition) {
  -webkit-transition: $transition;
  -moz-transition: $transition;
  -ms-transition: $transition;
  -o-transition: $transition;
  transition: $transition;
}

// Appearance Mixin
@mixin appearance($appearance) {
  -webkit-appearance: $appearance;
  -moz-appearance: $appearance;
  appearance: $appearance;
}

// Flexbox
@mixin flexbox-center() {
  display: -webkit-flex;
  display: -moz-flex;
  display: -ms-flex;
  display: flex;
  align-items: center;
  justify-content: center;
}

// Grid
@mixin display-grid {
  display: -ms-grid;
  display: grid;
}

@mixin grid($grid-type, $args, $row-gap, $column-gap: $row-gap) {
  @supports (display: grid) {
    display: -ms-grid;
    display: grid;
    #{$grid-type}: #{$args};
    grid-gap: rem($row-gap) rem($column-gap);
  }
}

// Font Scale
@mixin font-scale($font-family, $font-weight, $font-size, $line-height) {
  font-family: $font-family;
  font-weight: $font-weight;
  font-size: $font-size;
  line-height: $line-height;
}